#!/bin/bash
# Purpose: message something into ngcpcfg logs and/or screen
################################################################################

set -e
set -u

# support testsuite
FUNCTIONS="${FUNCTIONS:-/usr/share/ngcp-ngcpcfg/functions/}"
HELPER="${HELPER:-/usr/share/ngcp-ngcpcfg/helper/}"
SCRIPTS="${SCRIPTS:-/usr/share/ngcp-ngcpcfg/scripts/}"

if ! [ -r "${FUNCTIONS}"/main ] ; then
  printf "Error: %s/main could not be read. Exiting.\n" "${FUNCTIONS}">&2
  exit 1
fi

. "${FUNCTIONS}"/main

## functions {{{
help() {
  cat << EOF
Usage: ngcpcfg message [<options>] -- <message>"

Example: ngcpcfg message "The message will be printed to STDOUT AND added into logs"

Options:
  --error     log message with level error
  --help      show this help message
  --info      log message with level info (default level)
  --warning   log message with level warning
EOF
}

## }}}

if [ -z "${1:-}" ]; then
  help >&2
  exit 1
fi

error=false
help=false
info=false
warning=false

clean_options="error,help,info,warning"
if ! _opt_temp=$(getopt --name "$0" -o +h --long ${clean_options} -- "$@") ; then
  log_error "Cannot parse command. Try 'ngcpcfg message --help' for more information."
  exit 1
fi
eval set -- "${_opt_temp}"

while : ; do
  case "$1" in
    --error)     error=true    ;;
    --help)      help=true     ;;
    --info)      info=true     ;;
    --warning)   warning=true  ;;
    --) shift ; break ;;
  esac
  shift
done

message="$*"

if "${help}" ; then
  help
  exit 0
fi

if ! "${error}" && ! "${warning}"; then
  info=true
fi

if "${error}"; then
  log_error "${message}"
elif "${warning}"; then
  log_warn "${message}"
elif "${info}"; then
  log_info "${message}"
else
  log_error "Something went wrong. We should not be here"
  exit 1
fi

exit 0

## END OF FILE #################################################################
