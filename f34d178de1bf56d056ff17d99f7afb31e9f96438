{
  "comments": [
    {
      "key": {
        "uuid": "3ac1b152_977be628",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2017-12-15T16:00:56Z",
      "side": 1,
      "message": "JFYI, this is still hard to manage due to /tmp/pytest-of-root/pytest-XX/test_YYY/ \n\n\nwhat can help is:\n\nroot@7644457938b9:/code/t# ./t/testrunner test_patch_action",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ac1b152_371772a5",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2017-12-15T16:50:01Z",
      "side": 1,
      "message": "I\u0027m not sure what you\u0027re asking for :)\n\n/tmp/pytest-of-root/pytest-XX/test_YYY/ is trivial to use/set, and could be any other directory as well, it\u0027s really just an example when hacking on pytest stuff and failing things (e.g. via \"assert 0, some_variable\").\n\ntestrunner is completely unrelated IMO, this command line here is about executing ngcpcfg in an as-much-as-possible-customized way by setting and controlling all related/involed variables. :)",
      "parentUuid": "3ac1b152_977be628",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ac1b152_9724c6c7",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2017-12-18T10:13:36Z",
      "side": 1,
      "message": "I just said, as for me (ngcpcfg test newbie) it is hard to execute \"properly\"\n \nHELPER\u003d../helper CONFIG_POOL\u003d/etc/ NGCPCFG\u003d./fixtures/ngcpcfg.cfg SCRIPTS\u003d../scripts/ FUNCTIONS\u003d../functions/ \\\nNGCP_BASE_TT2\u003d/tmp/pytest-of-root/pytest-XX/test_YYY/ NGCP_PORTFILE\u003d/tmp/ngcpcfg.port OUTPUT_DIRECTORY\u003d/tmp/  \\\nTEMPLATE_POOL_BASE\u003d/tmp/pytest-of-root/pytest-XX/test_YYY ../sbin/ngcpcfg [...]\n\nas I do not know what to set instead of \"pytest-XX\".\nWhat can really help me is a manual like:\n\ndocker pull\ndocker run\n./testrunner test_YYY\n\nTnx!",
      "parentUuid": "3ac1b152_371772a5",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1abeadc6_96120a57",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2017-12-19T15:57:59Z",
      "side": 1,
      "message": "I\u0027m not sure we\u0027re talking about the same. :)\n\nThose instructions are meant if you need to get your hands dirtyâ„¢ with ngcpcfg (and possibly in combination with pytest), without requiring a system wide installation.\n\nIf you just want to run certain tests then invoke \"py.test-3 -k test_YYY\". But controlling those environment variables manually is the *point* of it and why I\u0027m documenting it here: you might want to (re)use a certain directory for playing around, at the same time with running it from inside the source tree and not having to install it system-wide. If you don\u0027t know what /tmp/pytest-... path you should use: a simple \"assert 0, somevariable\" will fail and report the used tmpdir if we\u0027re talking about pytest. Though I\u0027m not sure how ./testrunner should know upfront what you\u0027re interested in hacking around, and you might not be using pytest at *all* when hacking around. :)\n\nSo unless you\u0027ve specific needs (which I\u0027d like to know!) that aren\u0027t met yet I\u0027m afraid I don\u0027t know what I should provide any further at this point. :)",
      "parentUuid": "3ac1b152_9724c6c7",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1abeadc6_f95ecf11",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2017-12-20T11:43:28Z",
      "side": 1,
      "message": "Tnx. As I said LGTM here. Right now I am the good example of average Sipwise developer which have no ideas about ngcpcfg tests while is willing to add one.\n\nSo, I am looking for very simple for me scenarios to start playing with tests... I do not want to have \"dirty\" way of playing. I want to have _one_ and _simple_ way to create the test without touching the framework... like \"v n ce\" and I do not care about anything else.\n\nSo, if I start docker container (as an isolated test framework container, the first step I can do is to run all the tests, jusp press up and enter, it is nice. While I cannot run only who I am changing/tunning right now. And run all of them - is too slow (or at least just slower). So I was thinking about \"./testrunner \u003ctest_name\u003e\" inside Docker container. Just like we have for REST API tests.\n\n\nAll the smart and dirty cases is too early for me on this stage when I am not speaking freely with Python at all.\n\nTnx anyway, the current description is better then nothing.",
      "parentUuid": "1abeadc6_96120a57",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1abeadc6_1c9b79ca",
        "filename": "t/README.adoc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2017-12-20T19:18:00Z",
      "side": 1,
      "message": "\u003e So, I am looking for very simple for me scenarios to start playing\n \u003e with tests... I do not want to have \"dirty\" way of playing. I want\n \u003e to have _one_ and _simple_ way to create the test without touching\n \u003e the framework... like \"v n ce\" and I do not care about anything\n \u003e else.\n\nOk\n\n \u003e So, if I start docker container (as an isolated test framework\n \u003e container, the first step I can do is to run all the tests, jusp\n \u003e press up and enter, it is nice. While I cannot run only who I am\n \u003e changing/tunning right now. And run all of them - is too slow (or\n \u003e at least just slower). So I was thinking about \"./testrunner\n \u003e \u003ctest_name\u003e\" inside Docker container. Just like we have for REST\n \u003e API tests.\n\nAh, that\u0027s as simple as:\n\n  cd t ; py.test-3 -v -k \u003ctest_name\u003e\n\nQuoting from `py.test-3 --help`:\n\n\u003cquote\u003e\ngeneral:\n  -k EXPRESSION         only run tests which match the given substring\n                        expression. An expression is a python evaluatable\n                        expression where all names are substring-matched\n                        against test names and their parent classes. Example:\n                        -k \u0027test_method or test other\u0027 matches all test\n                        functions and classes whose name contains\n                        \u0027test_method\u0027 or \u0027test_other\u0027. Additionally keywords\n                        are matched to classes and functions containing extra\n                        names in their \u0027extra_keyword_matches\u0027 set, as well as\n                        functions which have names assigned directly to them.\n\u003cend_of_quote\u003e\n\nAnd this is exactly what I already provide in the docs \"Test runs\" starting in line 23 :) So if that\u0027s unclear yet please let me know what\u0027s not clear yet.\n\n \u003e All the smart and dirty cases is too early for me on this stage\n \u003e when I am not speaking freely with Python at all.\n \u003e Tnx anyway, the current description is better then nothing.\n\nOk, finally understood what you\u0027re looking for. :)",
      "parentUuid": "1abeadc6_f95ecf11",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 79
      },
      "revId": "f34d178de1bf56d056ff17d99f7afb31e9f96438",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    }
  ]
}