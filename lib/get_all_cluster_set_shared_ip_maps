[%
  # Return an array of hashes, each hash containing dispatcher_id and ips,
  # which is an array of shared ips, for a given cluster set type.
  #
  # @param argv.host  If the cluster_set type is 'central; we need to filter by pair
  # @param argv.type	The type of element we are interested in (rtp, lb)
  # @return out		The array of hashes
-%]
[%
  IF !hosts.${argv.host}.defined;
    argv.host = 'self';
  END;
-%]
[%
  out = [];

  IF cluster_sets.type == 'central';
    set_hosts = [ hosts.$host, hosts.$host.peer ];
  ELSE;
    set_hosts = hosts.keys;
  END;


  FOREACH set IN cluster_sets.keys;
    NEXT IF (set == "default_set" || set == "type");
    blktmp.processed_hosts = {};
    theset = { dispatcher_id = cluster_sets.$set.dispatcher_id };
    theset.ips = [];

    FOREACH host IN set_hosts;
      NEXT UNLESS blktmp.processed_hosts.$host.defined;
      NEXT UNLESS hosts.$host.role.grep('^' _ argv.type _ '$').size();
      FOREACH iface IN hosts.$host.interfaces;
        NEXT UNLESS hosts.$host.$iface.cluster_sets.grep('^' _ set _ '$').size();
        blktmp.processed_hosts.$peer = 1;
        theset.ips.push(hosts.$host.$iface.ip);
        FOREACH ip IN hosts.$host.$iface.shared_ip;
          theset.ips.push(ip);
        END;
      END;
    END;

    IF theset.ips.size();
      out.push(theset);
    END;

  END;
-%]
