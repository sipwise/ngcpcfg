[%
# vi: ft=tt2

# Return an array of hashes, each hash containing dispatcher_id and ips,
# which is an array of shared IPs, for a given cluster set type.
#
# @param argv.role	The role of element we are interested in (rtp, lb).
# @param argv.type	The type of the interfaces (rtp_int, sip_int...).
# @return out		The array of hashes.

out = [];

FOREACH set IN cluster_sets.keys;
  NEXT IF (set == "default_set" || set == "type");
  blktmp.processed_hosts = {};
  theset = { dispatcher_id = cluster_sets.$set.dispatcher_id };
  theset.ips = [];

  FOREACH host IN hosts.keys.sort;
    NEXT IF blktmp.processed_hosts.$host.defined;
    NEXT UNLESS hosts.$host.role.grep('^' _ argv.role _ '$').size();
    peer = hosts.$host.peer;
    FOREACH iface IN hosts.$host.interfaces;
      NEXT UNLESS hosts.$host.$iface.cluster_sets.grep('^' _ set _ '$').size();
      NEXT UNLESS hosts.$host.$iface.type.grep('^' _ argv.type _ '$').size();
      blktmp.processed_hosts.$peer = 1;
      FOREACH ip IN hosts.$host.$iface.shared_ip;
        theset.ips.push(ip) UNLESS theset.ips.defined(ip);
      END;
    END;
  END;

  IF theset.ips.size();
    out.push(theset);
  END;

END;
out = out.sort;

-%]
