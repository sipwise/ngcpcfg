[%
# vi: ft=tt2

# Return an array of hashes, each hash containing dispatcher_id and ips,
# which is an array of IPs, for a given cluster set type.
#
# @param argv.host      If the cluster_set type is 'central; we need to filter
#                       by pair.
# @param argv.role      The role of element we are interested in (rtp, lb).
# @param argv.type      The type of the interfaces (rtp_int, sip_int...).
# @param argv.status    node status [ online, offline, inactive ]
#                         default value: ['online', 'inactive']
# @return out           The array of hashes.

IF !hosts.${argv.host}.defined;
  argv.host = 'self';
END;

IF !argv.status.size;
  argv.status = ['online', 'inactive'];
END;

status = {
  online = 0
  offline = 0
  inactive = 0
};
FOREACH val IN argv.status;
  status.$val = 1;
END;

out = [];

IF cluster_sets.type == 'central';
  set_hosts = [ argv.host, hosts.${argv.host}.peer ];
ELSE;
  set_hosts = hosts.keys.sort;
END;

FOREACH set IN cluster_sets.keys;
  NEXT IF (set == 'default_set' || set == 'type');
  theset = { dispatcher_id = cluster_sets.$set.dispatcher_id };
  theset.ips = [];

  FOREACH host IN set_hosts;
    NEXT UNLESS status.item(hosts.$host.status);
    NEXT UNLESS hosts.$host.role.grep('^' _ argv.role _ '$').size();
    FOREACH iface IN hosts.$host.interfaces;
      NEXT UNLESS hosts.$host.$iface.cluster_sets.grep('^' _ set _ '$').size();
      NEXT UNLESS hosts.$host.$iface.type.grep('^' _ argv.type _ '$').size();
      theset.ips.push(hosts.$host.$iface.ip) UNLESS theset.ips.defined(hosts.$host.$iface.ip);
    END;
  END;

  IF theset.ips.size();
    out.push(theset);
  END;

END;
out = out.sort;

-%]
