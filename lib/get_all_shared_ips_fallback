[%
# vi: ft=tt2

# Return an array of shared IPs from the interface of a given type for all
# nodes which act as a given role. Fallback on all IPs in case of no shared
# found.
#
# @param argv.role      The role of the node to process, one of:
#                         proxy, lb, mgmt
# @param argv.type      The interface type of a node to extract the shared
#                       IP from, one of:
#                         web_int, web_ext, sip_int, sip_ext, ...
# @param argv.status    node status [ online, offline, inactive ]
#                         default value: ['online', 'inactive']
# @return out           The array of shared IPs.

IF !argv.status.size;
  argv.status = ['online', 'inactive'];
END;

status = {
  online = 0
  offline = 0
  inactive = 0
};
FOREACH val IN argv.status;
  status.$val = 1;
END;

blktmp.processed_hosts = {};
out = [];

FOREACH host IN hosts.keys.sort;
  NEXT UNLESS status.item(hosts.$host.status);
  NEXT UNLESS hosts.$host.role.grep('^' _ argv.role _ '$').size();
  NEXT IF blktmp.processed_hosts.$host.defined;

  FOREACH iface IN hosts.$host.interfaces;
    FOREACH realiface IN hosts.$host.keys;
      NEXT IF realiface != iface;
      NEXT UNLESS hosts.$host.$realiface.type.grep('^' _ argv.type _ '$').size();

      peer = hosts.$host.peer;
      blktmp.processed_hosts.$peer = 1;
      FOREACH ip IN hosts.$host.$realiface.shared_ip;
        out.push(ip);
      END;
    END;
  END;
END;

IF !out.size;
  FOREACH host IN hosts.keys;
    NEXT UNLESS status.item(hosts.$host.status);
    NEXT UNLESS hosts.$host.role.grep('^' _ argv.role _ '$').size();

    FOREACH iface IN hosts.$host.interfaces;
      FOREACH realiface IN hosts.$host.keys;
        NEXT IF realiface != iface;
        NEXT UNLESS hosts.$host.$realiface.type.grep('^' _ argv.type _ '$').size();
        NEXT IF out.grep('^' _ hosts.$host.$realiface.ip _ '$').size();

        out.push(hosts.$host.$realiface.ip);
      END;
    END;
  END;
END;

out = out.sort;

-%]
